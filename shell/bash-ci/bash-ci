#!/bin/bash

APPNAME="$( basename "$0")"
[[ -r "/etc/${APPNAME}.conf" ]] && . "/etc/${APPNAME}.conf"
[[ -r "$HOME/.${APPNAME}.conf" ]] && . "$HOME/.${APPNAME}.conf"

usage() {
  echo "Usage: $0 function" >&2
  echo "Functions: add_project trigger_build rewrite_index remove_project update_schemas" >&2
  echo "$@" >&2
  echo
  exit 1
}

PROJECTS_DIR="${PROJECTS_DIR:-/var/lib/${APPNAME}}"
WEB_DIR="${WEB_DIR:-$PROJECTS_DIR/web}"
PUBLIC_BASE_URL="${PUBLIC_BASE_URL:-set your bash-ci address here}"
EDITOR="${EDITOR:-vim}"
MAX_JOBS="${MAX_JOBS:-2}"
PROJECTS_HISTORY_LIMIT="${PROJECTS_HISTORY_LIMIT:-20}"
INDEX_HTML="$WEB_DIR/index.html"
PID_PATH_NAME="build.pid"
PID_FILE_NAME="pidfile"
SQLITE_FILE="project.db"
BASHCI_USER="${BASHCI_USER:-$USER}"
BASHCI_TITLE="${BASHCI_TITLE:-Bash-CI Continuous Integration Dashboard}"
ENABLE_TRIGGER_BUILD="${ENABLE_TRIGGER_BUILD:-true}"
[[ "$ENABLE_TRIGGER_BUILD" == true ]] && TRIGGER_BUILD_URL="${TRIGGER_BUILD_URL:-cgi-bin/bash-ci}" || TRIGGER_BUILD_URL=""

PROJECTS_JSON="$WEB_DIR/projects.json"

project_basedir() {
  [[ "$1" == "web" ]] && echo "${WEB_DIR}/${PROJECT_NAME}" || echo "${PROJECTS_DIR}/${PROJECT_NAME}"
}

project_workdir() {
  echo "$( project_basedir "$@" )/work"
}

project_buildfile() {
  echo "$( project_basedir )/bashci-build"
}

project_pidfile() {
  echo "$( project_basedir )/$PID_PATH_NAME"
}

project_lastbuild() {
  echo "$( project_basedir web)/status.json"
}
project_history() {
  echo "$( project_basedir web )/history.json"
}

project_repodir() {
  echo "$( project_basedir )/repo"
}

projectdb() {
  echo "$( project_basedir)/$SQLITE_FILE"
}

project_is_running() {
  local PROJECT_NAME="$1"
  [[ -r "$( project_pidfile )" ]]
}
lock_build() {
  mkdir "$( project_pidfile )"
}

wait_lock() {
  while ! lock_build; do sleep 1; done
}

unlock_build() {
  rm -rf "$( project_pidfile )"
}

projects_builds_running() {
  find "$PROJECTS_DIR" -name "$PID_PATH_NAME" | wc -l
}

wait_for_free_builders() {
  while [[ "$( find "$PROJECTS_DIR" -path "*/$PID_PATH_NAME/${PID_FILE_NAME}" -not -path "$(project_basedir)/*" | wc -l )" -ge "$MAX_JOBS" ]]; do
    sleep 1
  done
}

wait_for_finished() {
  local PROJECT_NAME="$1"
  project_is_running "$PROJECT_NAME" && echo "Project ${PROJECT_NAME} already running, waiting for finished"
  while project_is_running "$PROJECT_NAME"; do
    echo -en "."
    sleep 1
  done
}

git_init_repo() {
  [[ -d "$( project_repodir )/.git" ]] && return 0
  git clone "$1" "$(project_repodir)" && ( cd "$(project_repodir)" && git submodule init )
}

git_update_repo() {
 (cd ${REPO_DIR} && git pull && git submodule update )
}

git_commit_id() {
 (cd ${REPO_DIR} && git rev-parse HEAD )
}

git_changes() {
  if [[ -z "$PREVIOUS_COMMIT_ID" ]] ; then
    (cd ${REPO_DIR} && git log -n 5)
  else
    (cd ${REPO_DIR} && git log "$PREVIOUS_COMMIT_ID".."$COMMIT_ID")
  fi
}

update_projects_json() {
  sep=""
  echo -en "[" > "$PROJECTS_JSON"
  find "$PROJECTS_DIR" -name "bashci-build" | sort -n | while read fname; do
    . "$fname"
    echo -en "$sep{\"name\":\"${PROJECT_NAME}\",\"description\":\"$PROJECT_DESCRIPTION\"}" >> "$PROJECTS_JSON"
    echo -en "{\"name\":\"${PROJECT_NAME}\",\"description\":\"$PROJECT_DESCRIPTION\"}" > "$(project_basedir web)/project.json"
    sep=","
  done
  echo -en "]" >> "$PROJECTS_JSON"
}


update_schemas() {
  local QUERY="$@"
  [[ -z "$QUERY" ]] && usage "update_schemas <sql_query>          Updates all project databases using the specified query"
  find "$PROJECTS_DIR" -name "bashci-build" | sort -n | while read fname; do
    . "$fname"
    echo "Running query on $PROJECT_NAME..." >&2
    sql_project "$QUERY"
  done
}

remove_project() {
  local PROJECT_NAME="$1"
  [ -z "$PROJECT_NAME" ] && usage "remove_project project_name"
  read -ep "About to remove project $PROJECT_NAME. Are you sure? [y/n] " -n1 sure
  [[ "$sure" != "y" ]] && return 1
  rm -rf "$( project_basedir )" "$( project_basedir web )"
  update_projects_json
}

sql_project() {
  sqlite3 "$(projectdb)" <<<"$@"
}

add_project() {
  local PROJECT_NAME="$1"
  repo_type="$2"
  repo_url="$3"
  [ -z "$repo_url" ] && usage "add_project project_name repo_type repo_url [description] (repo type currently supported: git)"
  mkdir -p "$( project_workdir )" "$( project_basedir web )"
  sql_project "CREATE TABLE builds(id integer primary key not null, started INTEGER, finished INTEGER, exit_code INTEGER, status TEXT, commit_id TEXT);"
  sql_project "CREATE TABLE artifacts(id integer primary key not null, build_id integer not null, name TEXT NOT NULL, path TEXT NOT NULL);"
  cat >"$( project_buildfile )" <<EOF
#!/bin/bash
PROJECT_NAME="$PROJECT_NAME"
PROJECT_WORKDIR="$( project_workdir )"
PROJECT_DESCRIPTION="$4"
REPO_DIR="$( project_repodir )"
REPO_URL="$repo_url"
REPO_TYPE="$repo_type"

## $PROJECT_NAME build file. Tweak it and add build options to make it automatically run.
## Available environment variables: PROJECTS_DIR PROJECT_NAME PROJECT_DESCRIPTION REPO_DIR
## You can also parse arguments in "\$@" before starting any build, for instance to set a working branch.

## Name your build functions with bashci_build_NN_name and the CI system will automatically run them in sequence
## By default, steps will be executed inside PROJECT_WORKDIR
bashci_build_00_start_build() {
  false
}

## You can also define hooks for build success and failure:

MAIL_RECIPIENT="Your Name <your-address@mail.com>"

bashci_success_trigger() {
  return # Remove this line to enable the trigger
  if [[ "\$PREVIOUS_BUILD_RESULT" == "failure" ]]; then
    mail  -s "Bash-CI \$PROJECT_NAME Build \$build_id: success" "\$MAIL_RECIPIENT" <<EOM
Build #\$build_id successful for project \${PROJECT_NAME}.
You can see the full log at \${PUBLIC_BASE_URL}
Regards,
Bash-CI

EOM
 fi
}

bashci_failure_trigger() {
  return # Remove this line to enable the trigger
  mail  -s "Bash-CI \$PROJECT_NAME Build \$build_id: failure" "\$MAIL_RECIPIENT" <<EOM
Build #\$build_id failed for project \${PROJECT_NAME}.
Summary (last 50 log lines):
\$( tail -n 50 \$(project_basedir web)/\${build_id}/build.log )
You can see the full log at \${PUBLIC_BASE_URL}
Regards,
Bash-CI

EOM
}

## In these triggers you can use the PREVIOUS_BUILD_RESULT environment variable (success/failure). For instance, this way you can send a success notification email only if the previous build was failed. 

## You can archive artifacts (files or directories) from any build step (including success and failure hooks) using the 'publish' command.
## Publish accepts the file/directory as first parameter, and an optional compressor application (gzip, bzip2, xz). Directories are always archived as tar, compressed if requested.

EOF
  $EDITOR "$( project_buildfile )"
  update_projects_json
  echo '{ "status": "new" }' > "$( project_lastbuild )"
}

split() {
  IFS="|" read -ra SPLITTED <<<"$@"
}

update_project_json() {
  local project_history="$( project_history )"
  local project_lastbuild="$( project_lastbuild )"
  echo -n "[" > "$( project_history )"
  history_entry_2_json() {
    split "$row"
    row_json="{\"id\": \"${SPLITTED[0]}\", \"started\": \"${SPLITTED[1]}\", \"finished\": \"${SPLITTED[2]}\", \"exit_code\": \"${SPLITTED[3]}\", \"status\": \"${SPLITTED[4]}\"}"
  }
  sqlite3 "$( projectdb )" <<<"select id, started, finished, exit_code, status from builds ORDER BY id DESC LIMIT ${PROJECTS_HISTORY_LIMIT};" | while read row; do
    history_entry_2_json
    echo -n "$sep${row_json}" >> "${project_history}"
    sep=","
  done
  row="$( sqlite3 "$( projectdb )" <<<"select id, started, finished, exit_code, status from builds ORDER BY id DESC LIMIT 1;" )"
  history_entry_2_json
  echo -n "$row_json" > "$project_lastbuild"
  echo -n "]" >> "${project_history}"
}



publish() {
  local file="$1"
  local compression="${2:-none}"
  local suffix=""
  local pre_suffix=""

  [[ -d "$file" ]] && pre_suffix=".tar"
  case "$compression" in
    gzip)
      suffix=.gz
      ;;
    bzip2)
      suffix=.bz2
      ;;
    xz)
      suffix=.xz
      ;;      
  esac
  original_file_name="$( basename "$file" )"
  file_name="${original_file_name}${pre_suffix}${suffix}"
  file_path="$( project_basedir web)/$build_id/${file_name}"
  as_stream() {
    [[ -d "$file" ]] && tar cf - -C "$( dirname "$file" )" "$original_file_name" || cat "$file"
  }
  case "$compression" in
    none)
      as_stream > "$file_path"
      ;;
    gzip|bzip2|xz)
      echo "Archiving $file to $file_path" >&2
      as_stream | "$compression"  -9ck > "$file_path" 
      ;;
  esac
  sqlite3 "$( projectdb )" <<<"INSERT INTO artifacts (build_id, name, path) VALUES ($build_id, '$file_name', '$file_path');"
}

build_project() {
  local PROJECT_NAME="$1"; shift
  [ -r "$( project_buildfile )" ] && . "$( project_buildfile )" # TODO: handle errors
  wait_lock
  wait_for_free_builders
  
  build_on_no_changes=false

  while [[ -n "$1" ]]; do eval "export ${1/=/=\"}\""; shift; done
  
  echo "$BASHPID" > "$(project_pidfile)/${PID_FILE_NAME}"
  build_id="$( sql_project "INSERT INTO builds(started, status) VALUES((SELECT datetime('now', 'localtime')), 'building'); select last_insert_rowid();")"
  PREVIOUS_BUILD_RESULT="$( sql_project "SELECT status FROM builds WHERE id < $build_id ORDER BY id DESC LIMIT 1;" )"
  mkdir -p "$(project_basedir web)/${build_id}"
  logfile="$(project_basedir web)/${build_id}/build.log"
  : > "$logfile"
  log() {
    tee -a "$logfile"
  }
  
  echo "Global build options: build_on_no_changes=true|false      builds even if there were no commits and previous build was successful, defaults to false)" | log
  
  finish_build() {
    local exit_code="$1"; shift
    local message="$@"
    [[ -n "$message" ]] && echo -e "$message" | log
    [[ "${exit_code}" == 0 ]] && build_status="success" || build_status="failure"
    sql_project "UPDATE builds SET finished=(SELECT datetime('now', 'localtime')), exit_code=$exit_code, status='$build_status' WHERE id = $build_id;"
    echo "$(date -Is) - Build finished: $build_status ($exit_code)" | log
    [[ "$( type -t "bashci_${build_status}_trigger" )" == "function" ]] && bashci_${build_status}_trigger
    update_project_json
    local artifacts_file="$(project_basedir web)/${build_id}/artifacts.json"
    echo -n "[" > "$artifacts_file"
    sql_project "SELECT id,name,path FROM artifacts WHERE build_id = $build_id;" | while read row; do
      split "$row"
      echo -n "${separator}{\"id\":${SPLITTED[0]},\"name\":\"${SPLITTED[1]}\",\"path\":\"${SPLITTED[2]}\"}" >> "$artifacts_file"
      local separator=","
    done
    echo -n "]" >> "$artifacts_file"
    unlock_build
    exit "$exit_code"
  }
  
  build_started_time="$( date -Is )"
  echo "Build id: $build_id, started at $build_started_time, previous build: $PREVIOUS_BUILD_RESULT" | log

  update_project_json
  set -o pipefail
  "${REPO_TYPE}_init_repo" "$REPO_URL" 2>&1| log || finish_build $? "Unable to checkout $REPO_TYPE repository from $REPO_URL"
  "${REPO_TYPE}_update_repo" 2>&1 | log || finish_build $? "Unable to update source code from $REPO_RYPE remote repository $REPO_URL"
  COMMIT_ID="$(${REPO_TYPE}_commit_id)"
  sql_project "UPDATE builds SET commit_id = '$COMMIT_ID' WHERE id = $build_id;"
  PREVIOUS_COMMIT_ID="$( sql_project "select commit_id from builds WHERE status <> 'building' ORDER BY finished desc LIMIT 1;" )"
  echo "Current commit id: $COMMIT_ID" | log
  if [[ "$build_on_no_changes" != "true" && "$COMMIT_ID" == "$PREVIOUS_COMMIT_ID" && "$PREVIOUS_BUILD_RESULT" == "success" ]]; then
    echo "Skipping build since there were no changes, to disable this behaviour launch trigger_build with build_on_no_changes=true parameter" | log
    finish_build 0
  fi
  echo "======================= Changes List =======================" | log
  "${REPO_TYPE}_changes" | log
  echo "============================================================" | log
  for fname in $( declare -F| grep bashci_build_ | awk '{ print $3 }' | sort -n ); do
    echo "============================================================" | log
    step_name="${fname#bashci_build_??_}"
    echo "$( date -Is ) - Running '$step_name'" | log
    set -o pipefail
    cd "$PROJECT_WORKDIR"
    "$fname" 2>&1 | log || finish_build "$?" "------------------------------- Step $step_name failed"
  done
  
  finish_build 0
}

trigger_build() {
  local PROJECT_NAME="$1"
  [[ -z "$PROJECT_NAME" ]] && usage "trigger_build project-name"
  build_id="$( date -Is )"
  if ! [[ -d "$( project_workdir )" ]]; then
    echo "ERROR! Project $PROJECT_NAME doesn't exist" >&2
    return 1
  fi
  logfile="$( project_workdir )/bashci-build.log"
  echo "Launched build with id $build_id, logfile: $logfile"
  ( nohup bash "$0" build_project "$@" > "$logfile" 2>&1 & )2>/dev/null
}

rewrite_index() {
  rm -f "$INDEX_HTML"
  cat > "$INDEX_HTML" <<EOF
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>${BASHCI_TITLE}</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
    <style>
        .build-success:before{
          content:"\2714";
          color: darkgreen;
        }
        .build-failure:before{
          content:"\2718";
          color: darkred;
        }
        .build-building:before{
          content:"\25B6";
          color: darkblue;
        }
        .build-success:before, .build-failure:before, .build-building:before {
          padding-right: 5px;
        }
        li .build-success, li .build-failure, li .build-building {
          padding-left: 1em;
          text-indent: -1em;
        }
        #popup-container {
          position: fixed;
          right: 0px;
          bottom: 0px;
        }
    </style>
    <script>
      var showTab = function(name) {
        \$('.tabs-stack').hide();
        \$('#' + name).show();
      };
      var update_project_history_timer = false;
      var update_project_logs_timer = false;
      var project_history;
      
      var scrollTo = function(position) {
        \$("html, body").animate({ scrollTop: position }, "slow");
      }
      
      var read_log = function(id, name) {
          var build_status = project_history.find(function(e) { return e.id == id; });
          if(build_status != undefined) {
            \$('#build-current-status').html(build_status.status);
            \$('#build-current-started').html(build_status.started);
            \$('#build-current-finished').toggle(build_status.finished.length > 0);
            \$('#build-current-finished-time').html(build_status.finished);
            \$('#build-status-details').attr('class', 'build-' + build_status.status);
          }
          jQuery.get( name + "/" + id + "/build.log", function(log){
              \$('#project-details-build-log').text(log);
          });
          if(following_logs) {
            scrollTo( \$(document).height());
          }
      };
      var display_build = function(event) {
        var id = event.data.id;
        var name = event.data.name;
        \$('#build-title').html("Build #" + id);
        \$('.build-details').show();
        tail_log(id, name);
        \$('#build_artifacts').hide();
        
        jQuery.getJSON(name + "/" + id + "/artifacts.json", function(artifacts){
          \$('#build_artifacts').toggle(artifacts.length > 0 );
          for(var i = 0; i < artifacts.length; i++) {
            var artifact = artifacts[i];
            \$('#build_artifacts_list').append('<li><a href="' + name + '/' + id + '/' + artifact.name + '">' + artifact.name + '</a></li>'); 
          }
        });
      };
      var tail_log = function(id, name) {
        \$('.build-item').removeClass('bg-info');
        \$(".build-item[data-build-id='" + id + "']").addClass('bg-info');
        clearInterval(update_project_logs_timer);
        read_log(id, name);
        update_project_logs_timer = setInterval(function() {read_log(id, name); }, 1000);
      };
      var current_project_name;
      var showProject = function(name) {
        current_project_name = name;
        jQuery.getJSON( name + "/project.json", function(project){
          \$('#project-details-name').html(project.name);
          \$('#project-details-description').html(project.description);
          \$('.build-details').hide();
        });
        var update_project_history = function() {
          jQuery.getJSON( name + "/history.json", function(history){
            project_history = history;
            for(var i = history.length-1; i>=0; i--) {
              var item_status_id = 'build_' + history[i].id + '_status';
              if(\$('#' + item_status_id).length == 0) {
                \$('<li data-build-id="' + history[i].id + '" class="build-item"><a href="#"><span id="' + item_status_id + '"><small>#' + history[i].id + ' ' + history[i].started + '</small></span></a></li>')
                  .prependTo('#project-details-history')
                  .click( {"id": history[i].id, "name": name}, display_build);
              }
              \$('#' + item_status_id).attr("class", 'build-' + history[i].status);
            }
            \$('.build-item').each(function(index, element){
              var to_delete = true;
              for(var i=0; i<history.length; i++) {
                if(\$(element).data().buildId == history[i].id)
                  to_delete = false;
              }
              if(to_delete)
                \$(element).remove();
            });
          });
        };
        \$('#project-details-history').empty();
        update_project_history();
        \$('#project-details-build-log').empty();
        update_project_history_timer = setInterval(update_project_history, 1000);
        showTab('project-details');
      };
      
      var showDashboard = function() {
        current_project_name = "";
        clearInterval(update_project_history_timer);
        clearInterval(update_project_logs_timer);
        showTab('dashboard');
      };
      
      var reset_popup_timer = function(seconds) {
        window.setTimeout(function() { \$('#popup-container').hide().attr('class', 'alert'); }, 1000*seconds);
      }
      var build_project = function() {
        var trigger_failed = function() { \$('#popup-container').html("Could not start build for " + current_project_name).addClass("alert-danger"); };
        jQuery.getJSON( "$TRIGGER_BUILD_URL?" + current_project_name, function(build){
          if(build.result == 0)
            \$('#popup-container').html("Build for " + build.project + " correctly started").addClass("alert-success");
          else
            trigger_failed();
          \$('#popup-container').show();
          reset_popup_timer(10);
        }).fail(trigger_failed);
      };
      var loaded_projects = {};
      var add_project = function(project) {
      var tabname=project.name + "_tab";
      var rowname=project.name + "_row";
      \$(".projects").append("<tr id='" + rowname + "'></tr>");
      \$("#" + rowname).html("\
        <td>\
          <a href='#' onclick='showProject(\"" + project.name + "\");'>" + project.name + "</a>\
        </td>\
        <td>" + project.description + "</td>\
        <td id='" + project.name + "_build_started'/>\
        <td><span id='" + project.name +"_dash_status'></span></td>\
        ");
      var show_status = function() {
        jQuery.getJSON( project.name + "/status.json", function(status){
          \$('#' + project.name + '_dash_status').html(status.status).attr("class", "build-" + status.status);
          \$('#' + project.name + '_build_started').html(status.started);
        });
      };
      show_status();
      project['timer'] = window.setInterval(show_status, 1000);
      loaded_projects[project.name] = project;
    }
    var load_projects = function() {
      jQuery.getJSON("projects.json", function(projects){
        for(var i=0; i<projects.length; i++){
          if(loaded_projects[projects[i].name] == undefined)
            add_project(projects[i]);
        }
        for(var project in loaded_projects) {
          var present = false;
          for(var i = 0; i <projects.length; i++) {
            present |= projects[i].name == project;
          }
          if(! present) {
            \$('#' + project + '_row').remove();
            delete loaded_projects[project];
          }
        }
      });
    };
    
    var following_logs = false;
    var follow_logs = function(follow) {
      following_logs = follow;
      if(following_logs) {
        \$('#follow_logs').addClass("active");
      } else {
        \$('#follow_logs').removeClass("active");
      }
    };    
    \$(document).ready(function() {
      \$('#popup-message').hide();
      load_projects();
      window.setInterval(load_projects, 1500);
    });
    </script>
  </head>
  <body>
    <div class="page-header" style="margin-top: 20px; margin-left: 10px">
        <h2>${BASHCI_TITLE}</h2>
    </div>
    <div class="container tabs-stack" id="dashboard">
      <h3>Dashboard</h3>
      <table class="table projects table-bordered table-hover table-striped">
        <tr><th>Project</th><th>Description</th><th>Started</th><th>Status</th></tr>
      </table>
    </div>
    <div class="container-fluid tabs-stack" id="project-details" style="display: none">
      <div class="row">
        <h3 class="col-md-10"><span id="project-details-name"></span><small style="padding-left: 3em;" id="project-details-description"></small></h3>
        <div class="col-md-2">
          <div class="btn-group pull-right">
          $(
            [[ -n "$TRIGGER_BUILD_URL" ]] && echo '<button id="build-project" class="btn btn-primary" onclick="build_project();">Build</button>'
          )
          <button id="back-to-dashboard" class="btn btn-info" onclick="showDashboard();">Back to dashboard</button>
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-2">
          <h4>History</h4>
          <ul id="project-details-history" class="list-unstyled"></ul>
          <div style="position: fixed; bottom: 20px;" class="btn-group hidden-xs">
            <button id="scroll_top" class="btn btn-info btn-xs" onclick="follow_logs(false); scrollTo(0);">&#x2191; Up</button>
            <button id="follow_logs" class="btn btn-info btn-xs" onclick="follow_logs(!following_logs);">&#x2193; Follow Logs</button>
          </div>
        </div>
        <div class="col-md-10 build-details">
          <h4 id="build-title"></h4>
          <h5 id="build-status-details">Status: <span id="build-current-status"></span>, started: <span id="build-current-started"></span><span id="build-current-finished">, finished: <span id="build-current-finished-time"></span></span></h5>
          <div class="panel panel-default" id="build_artifacts">
            <div class="panel-heading">
              <h3 class="panel-title">Build Artifacts</h3>
           </div>
           <div class="panel-body">
             <ul id="build_artifacts_list"></ul>
           </div>
          </div>
          <h5>Logs</h5>
          <pre id="project-details-build-log"></pre><a name="logs-bottom" />
        </div>
      </div>
    </div>
    <div class="alert" id="popup-container" role="alert"><h3 id="popup-title"></h3><span id="popup-message"></div>
  </body>
</html>
EOF
}


if [[ -n "$SERVER_SOFTWARE" && -z "$SERVER_BUILD_TRIGGER" ]]; then
#   CGI Mode
  export SERVER_BUILD_TRIGGER=true
  $0 sudo trigger_build "$1" >&2
  exit_code="$?"
  echo "Content-type: application/json"
  echo ""
  echo "{\"command\":\"trigger_build\",\"project\":\"$1\",\"result\":$exit_code}"
  exit "$exit_code"
fi

if [[ "$1" == sudo ]]; then
  shift
  if [[ "${BASHCI_USER}" != "$USER" ]]; then
    sudo -Hu "${BASHCI_USER}" "$0" "$@"
    exit $?
  fi
fi


mkdir -p "${PROJECTS_DIR}" "${WEB_DIR}/cgi-bin"
ln -sf "$( readlink -f "$0" )" "${WEB_DIR}/cgi-bin"

[[ -r "$INDEX_HTML" ]] || rewrite_index

if [[ -n "$1" && "$1" != "--help" && "$( type -t "$1" )" == "function" ]]; then
    update_projects_json
    "$@"
else
    usage
fi
