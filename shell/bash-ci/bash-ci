#!/bin/bash

APPNAME="$( basename "$0")"
[[ -r "/etc/${APPNAME}.conf" ]] && . "/etc/${APPNAME}.conf"
[[ -r "$HOME/.${APPNAME}.conf" ]] && . "$HOME/.${APPNAME}.conf"

usage() {
  echo "Usage: $0 function" >&2
  echo "Functions: add_project trigger_build rewrite_index_html" >&2
  echo "$@" >&2
  exit 1
}

PROJECTS_DIR="${PROJECTS_DIR:-/var/lib/${APPNAME}}"
EDITOR="${EDITOR:-vim}"
QUEUE_SIZE="${QUEUE_SIZE:-2}"

INDEX_HTML="$PROJECTS_DIR/index.html"
PID_FILE_NAME="build.pid"

mkdir -p "${PROJECTS_DIR}"

project_basedir() {
  echo "${PROJECTS_DIR}/${PROJECT_NAME}"
}

project_workdir() {
  echo "$( project_basedir )/work"
}

project_buildfile() {
  echo "$( project_basedir )/build.sh"
}

project_pidfile() {
  echo "$( project_basedir )/$PID_FILE_NAME"
}

project_lastbuild() {
  echo "$( project_workdir)/last_build"
}

project_repodir() {
  echo "$( project_basedir )/repo"
}

projectfile() {
  echo "$( project_basedir)/bashci-project"
}

queue_free() {
  [[ ! -r "$( project_pidfile )" && "$( find "$PROJECTS_DIR" -name "$PID_FILE_NAME" )" -lt "$QUEUE_SIZE" ]]
}

git_init_repo() {
  git clone "$1" "$(project_repodir)"
  ( cd "$(project_repodir)" && git submodule init )
}

git_update_repo_command() {
 echo '( cd ${REPO_DIR} && git pull && git submodule update )'
}

update_projects_json() {
  sep=""
  echo -en "[" > "$PROJECTS_DIR/projects.json"
  find "$PROJECTS_DIR" -name "bashci-project" | sort -n | while read fname; do
    . "$fname"
    echo -en "$sep{\"name\":\"${PROJECT_NAME}\",\"description\":\"$PROJECT_DESCRIPTION\"}" >> "$PROJECTS_DIR/projects.json"
    sep=","
  done
  echo -en "]" >> "$PROJECTS_DIR/projects.json"
}


add_project() {
  PROJECT_NAME="$1"
  repo_type="$2"
  repo_url="$3"
  [ -z "$repo_url" ] && usage "add_project repo_name repo_type repo_url (repo type currently supported: git)"
  mkdir -p "$( project_workdir )"
  "${repo_type}_init_repo" "$repo_url"
  cat >"$( projectfile )" <<EOF
PROJECT_NAME="$PROJECT_NAME"
PROJECT_DESCRIPTION=""
PROJECT_DIR="$( project_workdir )"
REPO_DIR="$( project_repodir )"
EOF
  cat >"$( project_buildfile )" <<EOF
#!/bin/bash

. "$( projectfile )"

## $PROJECT_NAME build file. Tweak it and add build options to make it automatically run.
## Available environment variables: PROJECTS_DIR PROJECT_NAME PROJECT_DESCRIPTION REPO_DIR
## You can also parse arguments in "\$@" before starting any build, for instance to set a working branch.


# Update repository function: tweak if needed
bashci_build_00_update_repo() {
  $( "${repo_type}_update_repo_command" )
}

## Name your build functions with bashci_build_nn_name and the CI system will automatically run them in sequence
bashci_build_01_start_build() {
  false
}

## You can also define hooks for build success and failure:

bashci_success_trigger() {
  true
}

bashci_failure_trigger() {
  false
}

EOF
  $EDITOR "$( project_buildfile )"
  update_projects_json
}

build_project() {
  PROJECT_NAME="$1"; shift
  [ -r "$( project_buildfile )" ] && . "$( project_buildfile )" # TODO: handle errors
  while ! queue_free; do sleep 1; done
  echo "$BASHPID" > "$(project_pidfile)"
  build_started_time="$( date -Is )"
  echo "{\"status_name\":\"building\",\"started\":\"$build_started_time\"}" > "$(project_lastbuild)"
  declare -F| grep bashci_build_ | awk '{ print $3 }' | sort -n | while read fname; do
    echo "$( date -Is ) - Running '${fname#bashci_build_??_}'" >&2
    "$fname" || exit 1
  done
  status_code="$?"
  [[ "${status_code}" == 0 ]] && build_status="success" || build_status="failure"
  echo "$(date -Is) - Build finished: $build_status ($status_code)" >&2
  [[ "$( type -t "bashci_${build_status}_trigger" )" == "function" ]] && bashci_${build_status}_trigger
  echo "{\"exit_status\":$status_code,\"status_name\":\"$build_status\",\"started\":\"$build_started_time\",\"ended\":\"$(date -Is)\"}" > "$( project_lastbuild)"
  rm -f "$( project_pidfile)"
  exit "${status_code}"
}

trigger_build() {
  PROJECT_NAME="$1"
  build_id="$( date -Is )"

  logfile="$( project_workdir )/build-${build_id}.log"
  echo "Launched build with id $build_id, logfile: $logfile"
  rm -f "$( project_workdir )/build.log"; ln -s "$logfile" "$( project_workdir )/build.log"
  ( nohup "$0" build_project "$@" > "$logfile" 2>&1 & )2>/dev/null
}

rewrite_index_html() {
  rm -f "$INDEX_HTML"
  cat > "$INDEX_HTML" <<EOF
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Bash Continuous Integration Server Panel</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
  </head>
  <body>
    <nav class="navbar navbar-inverse">
      <div class="container">
        <div class="navbar-header">
          <a class="navbar-brand" href="#">Bash Continuous Integration</a>
        </div>
      </div>
    </nav>

    <div class="container-fluid">
      <ul class="nav nav-tabs projects-tabs">
        <li class="active"><a href="#home" data-toggle="tab">Dashboard</a></li>
      </ul>
      <div class="tab-content projects-tabs-content">
        <div class="tab-pane active" id="home">
          <table class="table projects table-bordered">
            <tr><th>Project</th><th>Description</th><th>Status</th></tr>
          </table>
        </div>
      </div>
    </div><!-- /.container -->
  </body>
  <script>
    var status_colors_map = {"building": "info", "failure": "danger", "success": "success"};
    var add_project = function(project) {
      \$(".projects").append("<tr id='" + project.name + "_row'></tr>");
      \$(".projects-tabs").append('<li><a href="#project_' + project.name + '" data-toggle="tab">' + project.name + '</a></li>');
      \$(".projects-tabs-content").append('<div class="tab-pane" id="project_' + project.name + '"></div>');
      \$("#" + project.name + "_row").html("<td>" + project.name + "</td><td>" + project.description + "</td><td id='" + project.name + "_build_status'></td>");
      window.setInterval(function() {
        jQuery.getJSON( project.name + "/work/last_build", function(status){
          \$('#' + project.name + '_build_status').html(status.status_name);
          \$("#" + project.name + "_row").attr("class", status_colors_map[status.status_name]);
        });
      }, 1000);
    }
    jQuery.getJSON("projects.json", function(projects){
        for(var i=0; i<projects.length; i++){
            add_project(projects[i]);
        }
    });
  </script>
</html>
EOF
}

[[ -r "$INDEX_HTML" ]] || rewrite_index_html
update_projects_json

if [[ -n "$1" && "$( type -t "$1" )" == "function" ]]; then "$@"; else usage; fi
